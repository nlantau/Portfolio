# -*- coding: utf-8 -*-# nlantau, 2020-05-11# Task 1, Home Assignment 2, MA111Aimport matplotlib.pyplot as pltimport numpy as np'''y(x)  = (x^3)/3 - (5*x^2)/2 + 4*x + 3y'(x) = (x^2) - 5*x + 4 y''(x)= 2*x - 5'''# variables#x2 = np.arange(-2.0, 15, 0.6)lim = np.arange(1, 5, 0.01)fig = plt.figure(dpi=150)ax = plt.axes()# Functions#y2 = ((lim2**3)/3) - ((5*lim2**2)/2) + (4*lim2) + 3y3 = ((lim**3)/3) - ((5*lim**2)/2) + (4*lim) + 3#dy = (x**2) - 5*x + 4#dy2 = 2*x - 5def yx():    x = np.arange(-2.0, 15, 0.1)        y = ((x**3)/3) - ((5*x**2)/2) + (4*x) + 3    plot(x, y, 'b-', 'y(x)')    #filler(lim, y3, 0, 'red')def yx_max():    lim2 = np.arange(1, 3, 2.)    ylim = ((lim2**3)/3) - ((5*lim2**2)/2) + (4*lim2) + 3    plot(lim2,ylim,'ro','Max')    ax.annotate("Max (1, 29/6)",            xy=(1, (29/6)), xycoords='data',            xytext=(0.05, 1), textcoords='data',            arrowprops=dict(arrowstyle="-|>",                            connectionstyle="arc3"),            )    def yx_min():    lim2 = np.arange(4, 6, 2.)    ylim = ((lim2**3)/3) - ((5*lim2**2)/2) + (4*lim2) + 3    plot(lim2,ylim,'go','Min')    ax.annotate("Min (4, 1/3)",            xy=(4, (1/3)), xycoords='data',            xytext=(3.1, 5), textcoords='data',            arrowprops=dict(arrowstyle="-|>",                            connectionstyle="arc3"),            )    def setup_env():    plt.axhline(0, color='black')    plt.axvline(0, color='black')    plt.axis([-3, 8, -4, 15])    plt.xticks([x for x in np.arange(-3,8,1)], rotation=0)    plt.yticks([x for x in np.arange(-4,15,1)], rotation=0)    plt.grid(b=True, which='major')    plt.xlabel('x')    plt.ylabel('y')def plot(x, y, style, label):    plt.plot(x, y, style, label=label)    def filler(x,y,val,color):    plt.fill_between(x, y, val, color=color)    def plot_extra():    lim = np.arange(1, 5.1, 1)    #print(lim)    y3 = ((lim**3)/3) - ((5*lim**2)/2) + (4*lim) + 3    #print(y3)    #plt.plot(lim, y3, drawstyle='steps-post', label='steps-post')    #plt.stem(lim, y3, use_line_collection=True)def legends():    plt.legend()    plt.suptitle('Home Assignment 2, Task 1 c)')    plt.title('Niklas Lantau')    plt.show()def main():    setup_env()    yx()    plot_extra()    yx_max()    yx_min()    legends()if __name__ == "__main__":    main()